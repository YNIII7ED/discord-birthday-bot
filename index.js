const { Client, GatewayIntentBits, EmbedBuilder, PermissionsBitField } = require('discord.js');
const { REST } = require('@discordjs/rest');
const { Routes } = require('discord-api-types/v10');
const sqlite3 = require('sqlite3').verbose();
const cron = require('node-cron');
const express = require('express'); // –î–ª—è —Ä–∞–±–æ—Ç—ã 24/7 –≤ Replit
require('dotenv').config();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Express –¥–ª—è Replit
const app = express();
const PORT = process.env.PORT || 3000;

app.get('/', (req, res) => {
  res.send('Birthday Bot is running!');
});

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const requiredEnvVars = ['BOT_TOKEN', 'CHANNEL_ID', 'CLIENT_ID', 'GUILD_ID'];
const missingVars = requiredEnvVars.filter(v => !process.env[v]);

if (missingVars.length > 0) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:', missingVars.join(', '));
  process.exit(1);
}

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.GuildMembers
  ]
});

// –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite
const db = new sqlite3.Database('./birthdays.db', (err) => {
  if (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', err.message);
    process.exit(1);
  }
  console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
});

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
db.serialize(() => {
  db.run(`
    CREATE TABLE IF NOT EXISTS birthdays (
      user_id TEXT PRIMARY KEY,
      username TEXT,
      birth_date TEXT CHECK(birth_date GLOB '[0-9][0-9].[0-9][0-9]')
    )
  `, (err) => {
    if (err) console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã:', err.message);
  });
});

// –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
const commands = [
  {
    name: 'birthday',
    description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–Ω—è–º–∏ —Ä–æ–∂–¥–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)',
    default_member_permissions: PermissionsBitField.Flags.Administrator.toString(),
    options: [
      {
        name: 'add',
        description: '–î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è',
        type: 1,
        options: [
          {
            name: 'user',
            description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            type: 6,
            required: true
          },
          {
            name: 'date',
            description: '–î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM (–Ω–∞–ø—Ä–∏–º–µ—Ä 15.05)',
            type: 3,
            required: true,
            min_length: 5,
            max_length: 5
          }
        ]
      },
      {
        name: 'remove',
        description: '–£–¥–∞–ª–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è',
        type: 1,
        options: [
          {
            name: 'user',
            description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            type: 6,
            required: true
          }
        ]
      },
      {
        name: 'list',
        description: '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è',
        type: 1
      }
    ]
  }
];

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤
async function checkBirthdays() {
  const now = new Date();
  const today = `${String(now.getDate()).padStart(2, '0')}.${String(now.getMonth() + 1).padStart(2, '0')}`;
  
  console.log(`[${now.toLocaleString('ru-RU')}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤...`);

  try {
    const channel = await client.channels.fetch(process.env.CHANNEL_ID);
    if (!channel?.isTextBased()) {
      console.error('‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π');
      return;
    }

    const birthdays = await new Promise((resolve) => {
      db.all(
        "SELECT user_id, username FROM birthdays WHERE birth_date = ?", 
        [today],
        (err, rows) => {
          if (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', err.message);
            return resolve([]);
          }
          resolve(rows || []);
        }
      );
    });

    if (birthdays.length === 0) {
      console.log('‚ÑπÔ∏è –ò–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç');
      return;
    }

    for (const user of birthdays) {
      try {
        await channel.send(`üéâ **–° –î–Ω—ë–º –†–æ–∂–¥–µ–Ω–∏—è, <@${user.user_id}>!** üéÇ`);
        console.log(`‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω: ${user.username}`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è ${user.username}:`, error.message);
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ checkBirthdays:', error);
  }
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
async function registerCommands() {
  try {
    const rest = new REST({ version: '10' }).setToken(process.env.BOT_TOKEN);
    console.log('üîÑ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥...');
    
    await rest.put(
      Routes.applicationGuildCommands(process.env.CLIENT_ID, process.env.GUILD_ID),
      { body: commands }
    );
    
    console.log('‚úÖ –ö–æ–º–∞–Ω–¥—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥:', error);
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
client.on('ready', async () => {
  console.log(`ü§ñ –ë–æ—Ç ${client.user.tag} –∑–∞–ø—É—â–µ–Ω!`);
  
  // –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ 21:00 UTC (00:00 –ú–°–ö)
  cron.schedule('0 21 * * *', checkBirthdays, {
    timezone: 'UTC',
    runOnInit: false
  });
  
  // –¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  // setTimeout(checkBirthdays, 5000);
});

client.on('interactionCreate', async (interaction) => {
  if (!interaction.isCommand()) return;

  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (!interaction.memberPermissions.has(PermissionsBitField.Flags.Administrator)) {
      return interaction.reply({
        content: '‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!',
        ephemeral: true
      });
    }

    await interaction.deferReply({ ephemeral: true });
    const subcommand = interaction.options.getSubcommand();

    switch (subcommand) {
      case 'add': {
        const user = interaction.options.getUser('user');
        const date = interaction.options.getString('date');

        if (!/^\d{2}\.\d{2}$/.test(date)) {
          return interaction.editReply('‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç DD.MM (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.05)');
        }

        db.run(
          "INSERT OR REPLACE INTO birthdays VALUES (?, ?, ?)",
          [user.id, user.tag, date],
          function(err) {
            interaction.editReply(
              err 
                ? '‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö'
                : `‚úÖ <@${user.id}> –¥–æ–±–∞–≤–ª–µ–Ω (${date})`
            );
          }
        );
        break;
      }

      case 'remove': {
        const user = interaction.options.getUser('user');
        
        db.run(
          "DELETE FROM birthdays WHERE user_id = ?",
          [user.id],
          function(err) {
            interaction.editReply(
              err
                ? '‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö'
                : this.changes > 0
                  ? `‚úÖ <@${user.id}> —É–¥–∞–ª–µ–Ω`
                  : '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
            );
          }
        );
        break;
      }

      case 'list': {
        db.all("SELECT * FROM birthdays ORDER BY birth_date", (err, rows) => {
          const embed = new EmbedBuilder()
            .setTitle('üéÇ –°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è')
            .setColor(0xFFA500)
            .setDescription(
              rows?.length 
                ? rows.map(u => `‚Ä¢ <@${u.user_id}> ‚Äî ${u.birth_date}`).join('\n')
                : '–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç'
            );
          
          interaction.editReply({ embeds: [embed] });
        });
        break;
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã:', error);
    interaction.editReply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
(async () => {
  try {
    await registerCommands();
    await client.login(process.env.BOT_TOKEN);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error);
    process.exit(1);
  }
})();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', () => {
  db.close();
  client.destroy();
  console.log('üõë –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É');
  process.exit();
});
