const { Client, GatewayIntentBits, EmbedBuilder, PermissionsBitField } = require('discord.js');
const { REST } = require('@discordjs/rest');
const { Routes } = require('discord-api-types/v10');
const sqlite3 = require('sqlite3').verbose();
const cron = require('node-cron');
const express = require('express');
require('dotenv').config();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Express –¥–ª—è Render
const app = express();
const PORT = process.env.PORT || 3000;

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON
app.use(express.json());

// Health check endpoint –¥–ª—è Render
app.get('/', (req, res) => {
  res.status(200).json({ 
    status: 'online',
    bot: client.user?.tag || 'starting...'
  });
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const requiredEnvVars = ['BOT_TOKEN', 'CHANNEL_ID', 'CLIENT_ID', 'GUILD_ID'];
const missingVars = requiredEnvVars.filter(v => !process.env[v]);

if (missingVars.length > 0) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:', missingVars.join(', '));
  process.exit(1);
}

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.GuildMembers
  ],
  // –£–º–µ–Ω—å—à–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è Render
  rest: {
    timeout: 30000,
    offset: 0
  }
});

// –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
const db = new sqlite3.Database('./birthdays.db', sqlite3.OPEN_READWRITE | sqlite3.OPEN_CREATE | sqlite3.OPEN_FULLMUTEX, (err) => {
  if (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', err.message);
    process.exit(1);
  }
  console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
  // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è Render
  db.run('PRAGMA journal_mode = WAL');
  db.run('PRAGMA synchronous = NORMAL');
  db.run('PRAGMA busy_timeout = 5000');
});

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
db.serialize(() => {
  db.run(`
    CREATE TABLE IF NOT EXISTS birthdays (
      user_id TEXT PRIMARY KEY,
      username TEXT,
      birth_date TEXT CHECK(birth_date GLOB '[0-9][0-9].[0-9][0-9]')
    )
  `, (err) => {
    if (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã:', err.message);
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ birthdays –≥–æ—Ç–æ–≤–∞');
    }
  });
});

// –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
const commands = [
  {
    name: 'birthday',
    description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–Ω—è–º–∏ —Ä–æ–∂–¥–µ–Ω–∏—è',
    default_member_permissions: PermissionsBitField.Flags.Administrator.toString(),
    options: [
      {
        name: 'add',
        description: '–î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è',
        type: 1,
        options: [
          {
            name: 'user',
            description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            type: 6,
            required: true
          },
          {
            name: 'date',
            description: '–î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM (–Ω–∞–ø—Ä–∏–º–µ—Ä 15.05)',
            type: 3,
            required: true,
            min_length: 5,
            max_length: 5
          }
        ]
      },
      {
        name: 'remove',
        description: '–£–¥–∞–ª–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è',
        type: 1,
        options: [
          {
            name: 'user',
            description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            type: 6,
            required: true
          }
        ]
      },
      {
        name: 'list',
        description: '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è',
        type: 1
      }
    ]
  }
];

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
async function checkBirthdays() {
  try {
    const now = new Date();
    const today = `${String(now.getDate()).padStart(2, '0')}.${String(now.getMonth() + 1).padStart(2, '0')}`;
    
    console.log(`[${now.toLocaleString('ru-RU')}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤...`);

    const channel = await client.channels.fetch(process.env.CHANNEL_ID).catch(console.error);
    if (!channel?.isTextBased()) {
      console.error('‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π');
      return;
    }

    const birthdays = await new Promise((resolve) => {
      db.all(
        "SELECT user_id, username FROM birthdays WHERE birth_date = ?", 
        [today],
        (err, rows) => {
          if (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', err.message);
            return resolve([]);
          }
          resolve(rows || []);
        }
      );
    });

    if (birthdays.length === 0) {
      console.log('‚ÑπÔ∏è –ò–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç');
      return;
    }

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–µ –±–æ–ª–µ–µ 1 –≤ —Å–µ–∫—É–Ω–¥—É)
    for (let i = 0; i < birthdays.length; i++) {
      const user = birthdays[i];
      try {
        await channel.send(`üéâ **–° –î–Ω—ë–º –†–æ–∂–¥–µ–Ω–∏—è, <@${user.user_id}>!** üéÇ`);
        console.log(`‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω: ${user.username}`);
        if (i < birthdays.length - 1) {
          await new Promise(resolve => setTimeout(resolve, 1000)); // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è ${user.username}:`, error.message);
      }
    }
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ checkBirthdays:', error);
  }
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
async function registerCommands() {
  try {
    const rest = new REST({ version: '10' }).setToken(process.env.BOT_TOKEN);
    console.log('üîÑ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥...');
    
    await rest.put(
      Routes.applicationGuildCommands(process.env.CLIENT_ID, process.env.GUILD_ID),
      { body: commands }
    );
    
    console.log('‚úÖ –ö–æ–º–∞–Ω–¥—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥:', error);
    // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(registerCommands, 5000);
  }
}

// –£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
client.on('interactionCreate', async (interaction) => {
  if (!interaction.isCommand()) return;

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–ª–æ–≤–∞ –æ—à–∏–±–æ–∫
  const handleCommand = async () => {
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      if (!interaction.memberPermissions?.has(PermissionsBitField.Flags.Administrator)) {
        return await interaction.reply({
          content: '‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!',
          ephemeral: true
        }).catch(console.error);
      }

      // –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç–∞–π–º–∞—É—Ç–∞
      const deferred = interaction.deferReply({ ephemeral: true }).catch(err => {
        console.error('–û—à–∏–±–∫–∞ deferReply:', err);
        return false;
      });

      if (!deferred) return;

      const subcommand = interaction.options.getSubcommand();

      switch (subcommand) {
        case 'add': {
          const user = interaction.options.getUser('user');
          const date = interaction.options.getString('date');

          if (!/^\d{2}\.\d{2}$/.test(date)) {
            return await interaction.editReply('‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç DD.MM (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.05)').catch(console.error);
          }

          await new Promise((resolve, reject) => {
            db.run(
              "INSERT OR REPLACE INTO birthdays VALUES (?, ?, ?)",
              [user.id, user.tag, date],
              function(err) {
                if (err) {
                  console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ë–î:', err);
                  interaction.editReply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö').catch(console.error);
                  reject(err);
                } else {
                  interaction.editReply(`‚úÖ <@${user.id}> –¥–æ–±–∞–≤–ª–µ–Ω (${date})`).catch(console.error);
                  resolve();
                }
              }
            );
          });
          break;
        }

        case 'remove': {
          const user = interaction.options.getUser('user');
          
          await new Promise((resolve, reject) => {
            db.run(
              "DELETE FROM birthdays WHERE user_id = ?",
              [user.id],
              function(err) {
                if (err) {
                  console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ë–î:', err);
                  interaction.editReply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö').catch(console.error);
                  reject(err);
                } else {
                  const message = this.changes > 0 
                    ? `‚úÖ <@${user.id}> —É–¥–∞–ª–µ–Ω` 
                    : '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω';
                  interaction.editReply(message).catch(console.error);
                  resolve();
                }
              }
            );
          });
          break;
        }

        case 'list': {
          const rows = await new Promise((resolve) => {
            db.all("SELECT * FROM birthdays ORDER BY birth_date", (err, rows) => {
              if (err) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–ø–∏—Å–∫–∞:', err);
                interaction.editReply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö').catch(console.error);
                return resolve([]);
              }
              resolve(rows || []);
            });
          });

          const embed = new EmbedBuilder()
            .setTitle('üéÇ –°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è')
            .setColor(0xFFA500)
            .setDescription(
              rows.length 
                ? rows.map(u => `‚Ä¢ <@${u.user_id}> ‚Äî ${u.birth_date}`).join('\n')
                : '–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç'
            );
          
          await interaction.editReply({ embeds: [embed] }).catch(console.error);
          break;
        }
      }
    } catch (error) {
      console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ:', error);
      try {
        if (interaction.replied || interaction.deferred) {
          await interaction.followUp({ content: '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', ephemeral: true }).catch(console.error);
        } else {
          await interaction.reply({ content: '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', ephemeral: true }).catch(console.error);
        }
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', err);
      }
    }
  };

  // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
  handleCommand();
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
client.on('ready', async () => {
  console.log(`ü§ñ –ë–æ—Ç ${client.user.tag} –∑–∞–ø—É—â–µ–Ω!`);
  
  // –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ 21:00 UTC (00:00 –ú–°–ö)
  cron.schedule('0 21 * * *', checkBirthdays, {
    timezone: 'UTC',
    runOnInit: false
  });
  
  // –¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  // setTimeout(checkBirthdays, 5000);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', error => {
  console.error('Unhandled Rejection:', error);
});

process.on('uncaughtException', error => {
  console.error('Uncaught Exception:', error);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –±–æ—Ç–∞
app.listen(PORT, () => {
  console.log(`üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  
  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –∏ –ª–æ–≥–∏–Ω –±–æ—Ç–∞
  registerCommands();
  client.login(process.env.BOT_TOKEN).catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –±–æ—Ç–∞:', error);
    process.exit(1);
  });
});

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω SIGTERM. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  shutdown();
});

process.on('SIGINT', () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω SIGINT. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  shutdown();
});

function shutdown() {
  db.close((err) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ë–î:', err);
    } else {
      console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∞');
    }
    client.destroy();
    console.log('ü§ñ –ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω');
    process.exit(0);
  });
}
