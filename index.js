const { Client, GatewayIntentBits, EmbedBuilder, PermissionsBitField } = require('discord.js');
const express = require('express');
const sqlite3 = require('sqlite3').verbose();
const cron = require('node-cron');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3000;

// –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–∏–Ω–≥–∞
app.get('/', (req, res) => res.send('Birthday Bot is running!'));

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const requiredEnvVars = ['BOT_TOKEN', 'CHANNEL_ID', 'CLIENT_ID', 'GUILD_ID'];
if (requiredEnvVars.some(v => !process.env[v])) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
  process.exit(1);
}

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.GuildMembers
  ]
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const db = new sqlite3.Database('./birthdays.db', sqlite3.OPEN_READWRITE | sqlite3.OPEN_CREATE, (err) => {
  if (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', err.message);
    process.exit(1);
  }
  console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
  db.configure("busyTimeout", 5000); // –¢–∞–π–º–∞—É—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
});

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
db.serialize(() => {
  db.run(`
    CREATE TABLE IF NOT EXISTS birthdays (
      user_id TEXT PRIMARY KEY,
      username TEXT,
      birth_date TEXT CHECK(birth_date GLOB '[0-9][0-9].[0-9][0-9]')
    )
  `, (err) => {
    if (err) console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã:', err.message);
  });
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤
async function checkBirthdays() {
  const today = new Date().toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit' });
  console.log(`[${new Date().toLocaleString()}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤...`);

  try {
    const channel = await client.channels.fetch(process.env.CHANNEL_ID);
    if (!channel?.isTextBased()) return;

    const birthdays = await new Promise((resolve) => {
      db.all("SELECT user_id, username FROM birthdays WHERE birth_date = ?", [today], (err, rows) => {
        if (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', err.message);
          resolve([]);
        } else {
          resolve(rows || []);
        }
      });
    });

    for (const user of birthdays) {
      try {
        await channel.send(`üéâ **–° –î–Ω—ë–º –†–æ–∂–¥–µ–Ω–∏—è, <@${user.user_id}>!** üéÇ`);
        console.log(`‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω: ${user.username}`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è ${user.username}:`, error.message);
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ checkBirthdays:', error);
  }
}

// –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
client.on('interactionCreate', async (interaction) => {
  if (!interaction.isCommand()) return;

  // –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
  if (!interaction.memberPermissions.has(PermissionsBitField.Flags.Administrator)) {
    return interaction.reply({ content: '‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!', ephemeral: true });
  }

  await interaction.deferReply({ ephemeral: true });
  const subcommand = interaction.options.getSubcommand();

  try {
    switch (subcommand) {
      case 'add': {
        const user = interaction.options.getUser('user');
        const date = interaction.options.getString('date');

        if (!/^\d{2}\.\d{2}$/.test(date)) {
          return interaction.editReply('‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç DD.MM (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.05)');
        }

        await new Promise((resolve, reject) => {
          db.run(
            "INSERT OR REPLACE INTO birthdays VALUES (?, ?, ?)",
            [user.id, user.tag, date],
            function(err) {
              if (err) reject(err);
              else resolve(this.lastID);
            }
          );
        });

        await interaction.editReply(`‚úÖ <@${user.id}> –¥–æ–±–∞–≤–ª–µ–Ω (${date})`);
        break;
      }

      case 'remove': {
        const user = interaction.options.getUser('user');
        
        const result = await new Promise((resolve, reject) => {
          db.run(
            "DELETE FROM birthdays WHERE user_id = ?",
            [user.id],
            function(err) {
              if (err) reject(err);
              else resolve(this.changes);
            }
          );
        });

        await interaction.editReply(
          result > 0 
            ? `‚úÖ <@${user.id}> —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞` 
            : '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
        );
        break;
      }

      case 'list': {
        const rows = await new Promise((resolve) => {
          db.all("SELECT * FROM birthdays ORDER BY birth_date", (err, rows) => {
            resolve(err ? [] : rows || []);
          });
        });

        const embed = new EmbedBuilder()
          .setTitle('üéÇ –°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è')
          .setColor(0xFFA500)
          .setDescription(
            rows.length 
              ? rows.map(u => `‚Ä¢ <@${u.user_id}> ‚Äî ${u.birth_date}`).join('\n')
              : '–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç'
          );

        await interaction.editReply({ embeds: [embed] });
        break;
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã:', error);
    await interaction.editReply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
});

// –ó–∞–ø—É—Å–∫
client.on('ready', () => {
  console.log(`ü§ñ –ë–æ—Ç ${client.user.tag} –∑–∞–ø—É—â–µ–Ω!`);
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00 –ú–°–ö (21:00 UTC)
  cron.schedule('0 21 * * *', checkBirthdays, { timezone: 'UTC' });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', error => {
  console.error('Unhandled promise rejection:', error);
});

process.on('uncaughtException', error => {
  console.error('Uncaught exception:', error);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –±–æ—Ç–∞
app.listen(PORT, () => {
  console.log(`üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  client.login(process.env.BOT_TOKEN).catch(console.error);
});
