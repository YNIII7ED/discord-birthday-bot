const { Client, GatewayIntentBits, EmbedBuilder, PermissionsBitField } = require('discord.js');
const { REST } = require('@discordjs/rest');
const { Routes } = require('discord-api-types/v10');
const sqlite3 = require('sqlite3').verbose();
const cron = require('node-cron');
const express = require('express');
const path = require('path');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3000;

// Health check endpoint
app.get('/', (req, res) => res.status(200).send('Birthday Bot is running'));

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const requiredEnvVars = ['BOT_TOKEN', 'CHANNEL_ID', 'CLIENT_ID', 'GUILD_ID'];
if (requiredEnvVars.some(v => !process.env[v])) {
  console.error('‚ùå Missing environment variables');
  process.exit(1);
}

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.GuildMembers
  ]
});

// –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –∞–±—Å–æ–ª—é—Ç–Ω—ã–º –ø—É—Ç–µ–º
const dbPath = path.join(__dirname, 'birthdays.db');
const db = new sqlite3.Database(dbPath, sqlite3.OPEN_READWRITE | sqlite3.OPEN_CREATE | sqlite3.OPEN_FULLMUTEX, (err) => {
  if (err) {
    console.error('‚ùå DB Error:', err.message);
    process.exit(1);
  }
  console.log('‚úÖ Database connected at', dbPath);
  
  // –í–∫–ª—é—á–∞–µ–º WAL mode –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  db.run('PRAGMA journal_mode = WAL');
  db.run('PRAGMA synchronous = NORMAL');
  
  // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
  db.run(`
    CREATE TABLE IF NOT EXISTS birthdays (
      user_id TEXT NOT NULL,
      username TEXT NOT NULL,
      birth_date TEXT NOT NULL CHECK(birth_date GLOB '[0-9][0-9].[0-9][0-9]'),
      guild_id TEXT NOT NULL,
      PRIMARY KEY (user_id, guild_id)
    )
  `, (err) => {
    if (err) {
      console.error('‚ùå Table creation error:', err.message);
    } else {
      console.log('‚úÖ Table "birthdays" ready');
    }
  });
});

// –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
const commands = [
  {
    name: 'birthday',
    description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–Ω—è–º–∏ —Ä–æ–∂–¥–µ–Ω–∏—è',
    default_member_permissions: PermissionsBitField.Flags.Administrator.toString(),
    options: [
      {
        name: 'add',
        description: '–î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è',
        type: 1,
        options: [
          {
            name: 'user',
            description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            type: 6,
            required: true
          },
          {
            name: 'date',
            description: '–î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM (–Ω–∞–ø—Ä–∏–º–µ—Ä 15.05)',
            type: 3,
            required: true,
            min_length: 5,
            max_length: 5
          }
        ]
      },
      {
        name: 'remove',
        description: '–£–¥–∞–ª–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è',
        type: 1,
        options: [
          {
            name: 'user',
            description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            type: 6,
            required: true
          }
        ]
      },
      {
        name: 'list',
        description: '–°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è',
        type: 1
      }
    ]
  }
];

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤ (–≤ 17:00 –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞)
async function checkBirthdays() {
  const today = new Date().toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit' });
  console.log(`[${new Date().toLocaleString()}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤ –Ω–∞ ${today}`);

  try {
    const channel = await client.channels.fetch(process.env.CHANNEL_ID);
    if (!channel?.isTextBased()) {
      console.error('‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π');
      return;
    }

    const birthdays = await new Promise((resolve) => {
      db.all(
        "SELECT user_id, username FROM birthdays WHERE birth_date = ? AND guild_id = ?", 
        [today, channel.guild.id], 
        (err, rows) => {
          if (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', err.message);
            return resolve([]);
          }
          resolve(rows || []);
        }
      );
    });

    if (birthdays.length === 0) {
      console.log('‚ÑπÔ∏è –°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤');
      return;
    }

    for (const user of birthdays) {
      try {
        await channel.send(`üéâ **–° –î–Ω—ë–º –†–æ–∂–¥–µ–Ω–∏—è, <@${user.user_id}>!** üéÇ`);
        console.log(`‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω: ${user.username}`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è ${user.username}:`, error.message);
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ checkBirthdays:', error);
  }
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
async function registerCommands() {
  try {
    const rest = new REST({ version: '10' }).setToken(process.env.BOT_TOKEN);
    console.log('üîÑ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥...');
    await rest.put(
      Routes.applicationGuildCommands(process.env.CLIENT_ID, process.env.GUILD_ID),
      { body: commands }
    );
    console.log('‚úÖ –ö–æ–º–∞–Ω–¥—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥:', error);
  }
}

// –£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
client.on('interactionCreate', async (interaction) => {
  if (!interaction.isChatInputCommand()) return;

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥ birthday
  if (interaction.commandName !== 'birthday') return;

  const subcommand = interaction.options.getSubcommand();
  const guildId = interaction.guild.id;

  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (!interaction.memberPermissions.has(PermissionsBitField.Flags.Administrator)) {
      return await interaction.reply({
        content: '‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!',
        ephemeral: true
      });
    }

    // –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º 15 –º–∏–Ω—É—Ç
    await interaction.deferReply({ ephemeral: true });

    switch (subcommand) {
      case 'add': {
        const user = interaction.options.getUser('user');
        const date = interaction.options.getString('date');

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
        if (!/^\d{2}\.\d{2}$/.test(date)) {
          return await interaction.editReply('‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç DD.MM (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.05)');
        }

        try {
          await new Promise((resolve, reject) => {
            db.run(
              `INSERT OR REPLACE INTO birthdays (user_id, username, birth_date, guild_id) 
               VALUES (?, ?, ?, ?)`,
              [user.id, user.username, date, guildId],
              function(err) {
                if (err) return reject(err);
                resolve();
              }
            );
          });
          
          await interaction.editReply(`‚úÖ <@${user.id}> –¥–æ–±–∞–≤–ª–µ–Ω (${date})`);
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', error);
          await interaction.editReply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö');
        }
        break;
      }

      case 'remove': {
        const user = interaction.options.getUser('user');
        
        try {
          const result = await new Promise((resolve, reject) => {
            db.run(
              "DELETE FROM birthdays WHERE user_id = ? AND guild_id = ?",
              [user.id, guildId],
              function(err) {
                if (err) return reject(err);
                resolve(this.changes);
              }
            );
          });

          const message = result > 0 
            ? `‚úÖ <@${user.id}> —É–¥–∞–ª–µ–Ω` 
            : '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω';
          await interaction.editReply(message);
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
          await interaction.editReply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
        }
        break;
      }

      case 'list': {
        try {
          const rows = await new Promise((resolve, reject) => {
            db.all(
              "SELECT * FROM birthdays WHERE guild_id = ? ORDER BY birth_date",
              [guildId],
              (err, rows) => {
                if (err) return reject(err);
                resolve(rows || []);
              }
            );
          });

          const embed = new EmbedBuilder()
            .setTitle('üéÇ –°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è')
            .setColor(0xFFA500)
            .setDescription(
              rows.length 
                ? rows.map(u => `‚Ä¢ <@${u.user_id}> ‚Äî ${u.birth_date}`).join('\n')
                : '–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç'
            );

          await interaction.editReply({ embeds: [embed] });
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–ø–∏—Å–∫–∞:', error);
          await interaction.editReply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞');
        }
        break;
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã:', error);
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
      if (interaction.deferred || interaction.replied) {
        await interaction.editReply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞');
      } else {
        await interaction.reply({
          content: '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞',
          ephemeral: true
        });
      }
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', err);
    }
  }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
client.on('ready', () => {
  console.log(`ü§ñ –ë–æ—Ç ${client.user.tag} –∑–∞–ø—É—â–µ–Ω!`);
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 17:00 –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞ (14:00 UTC)
  cron.schedule('00 21 * * *', checkBirthdays, {
    timezone: 'UTC',
    runOnInit: true // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', error => {
  console.error('Unhandled Rejection:', error);
});

process.on('uncaughtException', error => {
  console.error('Uncaught Exception:', error);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  registerCommands();
  client.login(process.env.BOT_TOKEN).catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –±–æ—Ç–∞:', error);
    process.exit(1);
  });
});
